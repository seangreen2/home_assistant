# Adjust thermostat to certain conditions
- alias: "Nest Home Mode (Adaptive)"
  initial_state: on
  trigger:
    - platform: state
      entity_id: group.family
      to: "home"
    - platform: state
      entity_id: binary_sensor.patio_door
      to: "off"
    - platform: time_pattern
      minutes: "/35"  # Runs every 35 minutes
    - platform: numeric_state
      entity_id: sensor.openweathermap_temperature
      above: 76
    - platform: numeric_state
      entity_id: sensor.openweathermap_temperature
      below: 55
  condition:
    - condition: state
      entity_id: binary_sensor.patio_door
      state: "off"
    - condition: template
      value_template: >
        {{ state_attr('climate.downstairs', 'preset_mode') != 'eco'
          and state_attr('climate.upstairs', 'preset_mode') != 'eco' }}
  action:
    - service: climate.set_preset_mode
      data:
        entity_id:
          - climate.downstairs
          - climate.upstairs
        preset_mode: "none"
    - service: climate.set_hvac_mode
      data_template:
        entity_id:
          - climate.downstairs
          - climate.upstairs
        hvac_mode: >
          {% set outside_temp = states('sensor.openweathermap_temperature') | float(0) %}
          {% set downstairs_temp = state_attr('climate.downstairs', 'current_temperature') | float(0) %}
          {% set upstairs_temp = state_attr('climate.upstairs', 'current_temperature') | float(0) %}
          {% set avg_inside_temp = ((downstairs_temp + upstairs_temp) / 2) %}
          
          {% if outside_temp >= 75 and avg_inside_temp >= 71 %}
            cool
          {% elif outside_temp < 55 and avg_inside_temp < 66 %}
            heat
          {% else %}
            heat_cool
          {% endif %}
    - delay: "00:00:30"
    - service: homeassistant.reload_config_entry
      target:
        device_id: 41cf689fe0938c4721204e1c10eb5ba8  # Reloads Upstairs Nest
#    - delay: "00:30:00"  # Prevents mode changes for 1 hour


# Adjust Downstairs HVAC temperature based on presence
    # Trigger if NO ONE is downstairs for 10+ minutes
- alias: Adjust Downstairs HVAC
  initial_state: on

  trigger:
    - platform: template
      value_template: >
        {% set sean_location = states('sensor.sean_room_location') | lower %}
        {% set emily_location = states('sensor.emily_room_location') | lower %}
        {{ sean_location in ['living_room', 'kitchen', 'sunroom', 'couch', 'foyer']
        or emily_location in ['living_room', 'kitchen', 'sunroom', 'couch', 'foyer'] }}
      for:
        minutes: 7

    - platform: template
      value_template: >
        {% set sean_location = states('sensor.sean_room_location') | lower %}
        {% set emily_location = states('sensor.emily_room_location') | lower %}
        {{ sean_location not in ['living_room', 'kitchen', 'sunroom', 'couch', 'foyer']
        and emily_location not in ['living_room', 'kitchen', 'sunroom', 'couch', 'foyer'] }}
      for:
        minutes: 10

    - platform: time_pattern
      minutes: "/15"

  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: group.family
        state: "home"
      - condition: state
        entity_id: input_boolean.bedtime_emily
        state: "off"
      - condition: state
        entity_id: input_boolean.bedtime_sean
        state: "off"
      - condition: template
        value_template: >
          {% set media_blocking = is_state('media_player.plex_living_room_tv', 'playing') 
          or is_state('media_player.shield', 'playing') %}
          {{ not media_blocking }}

  action:
    - choose:
        # If someone is downstairs, lower temp within day range
        - conditions:
            - condition: template
              value_template: >
                {% set sean_location = states('sensor.sean_room_location') %}
                {% set emily_location = states('sensor.emily_room_location') %}
                {{ sean_location in ['living_room', 'kitchen', 'sunroom', 'couch', 'foyer']
                or emily_location in ['living_room', 'kitchen', 'sunroom', 'couch', 'foyer'] }}
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: climate.downstairs
                      state: "cool"
                    - condition: template
                      value_template: >
                        {% set current = state_attr('climate.downstairs', 'temperature') | int %}
                        {{ 73 < current <= 75 }}
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.downstairs
                        temperature: "{{ state_attr('climate.downstairs', 'temperature') | int - 2 }}"
                - conditions:
                    - condition: state
                      entity_id: climate.downstairs
                      state: "heat_cool"
                    - condition: template
                      value_template: >
                        {% set high = state_attr('climate.downstairs', 'target_temp_high') | int %}
                        {{ 73 < high <= 75 }}
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.downstairs
                        target_temp_high: "{{ state_attr('climate.downstairs', 'target_temp_high') | int - 2 }}"
                        target_temp_low: "{{ state_attr('climate.downstairs', 'target_temp_low') | int }}"

        # If no one is downstairs, raise temp gently
        - conditions:
            - condition: template
              value_template: >
                {% set sean_location = states('sensor.sean_room_location') %}
                {% set emily_location = states('sensor.emily_room_location') %}
                {{ sean_location not in ['living_room', 'kitchen', 'sunroom', 'couch', 'foyer']
                and emily_location not in ['living_room', 'kitchen', 'sunroom', 'couch', 'foyer'] }}
            - condition: template
              value_template: >
                {% set current = state_attr('climate.downstairs', 'temperature') | int(default=0) %}
                {% set target_high = state_attr('climate.downstairs', 'target_temp_high') | int(default=0) %}
                {{ (73 <= current < 75) or (73 <= target_high < 75) }}
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: climate.downstairs
                      state: "cool"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.downstairs
                        temperature: "{{ state_attr('climate.downstairs', 'temperature') | int + 2 }}"
                - conditions:
                    - condition: state
                      entity_id: climate.downstairs
                      state: "heat_cool"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.downstairs
                        target_temp_high: "{{ state_attr('climate.downstairs', 'target_temp_high') | int + 2 }}"
                        target_temp_low: "{{ state_attr('climate.downstairs', 'target_temp_low') | int }}"

#
#
# Adjust Upstairs HVAC temperature based on presence
- alias: Adjust Upstairs HVAC
  initial_state: on

  trigger:
    # Someone is upstairs for 7+ minutes
    - platform: template
      value_template: >
        {% set sean_location = states('sensor.sean_room_location') | lower %}
        {% set emily_location = states('sensor.emily_room_location') | lower %}
        {{ sean_location in ['office', 'bedroom', 'bedroom2', 'guest'] 
        or emily_location in ['office', 'bedroom', 'bedroom2', 'guest'] }}
      for:
        minutes: 7

    # No one is upstairs for 5+ minutes
    - platform: template
      value_template: >
        {% set sean_location = states('sensor.sean_room_location') | lower %}
        {% set emily_location = states('sensor.emily_room_location') | lower %}
        {{ sean_location not in ['office', 'bedroom', 'bedroom2', 'guest']
        and emily_location not in ['office', 'bedroom', 'bedroom2', 'guest'] }}
      for:
        minutes: 5

    - platform: time_pattern
      minutes: "/15"

  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: group.family
        state: "home"
      - condition: state
        entity_id: input_boolean.bedtime_emily
        state: "off"
      - condition: state
        entity_id: input_boolean.bedtime_sean
        state: "off"
      - condition: template
        value_template: >
          {{ not is_state('media_player.plex_bedroom_tv', 'playing') }}

  action:
    - choose:
        # If someone is upstairs, lower cooling temp within allowed range
        - conditions:
            - condition: template
              value_template: >
                {% set sean_location = states('sensor.sean_room_location') %}
                {% set emily_location = states('sensor.emily_room_location') %}
                {{ sean_location in ['office', 'bedroom', 'bedroom2', 'guest']
                or emily_location in ['office', 'bedroom', 'bedroom2', 'guest'] }}
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: climate.upstairs
                      state: "cool"
                    - condition: template
                      value_template: >
                        {% set current = state_attr('climate.upstairs', 'temperature') | int %}
                        {{ 73 < current <= 75 }}
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.upstairs
                        temperature: "{{ state_attr('climate.upstairs', 'temperature') | int - 2 }}"
                - conditions:
                    - condition: state
                      entity_id: climate.upstairs
                      state: "heat_cool"
                    - condition: template
                      value_template: >
                        {% set high = state_attr('climate.upstairs', 'target_temp_high') | int %}
                        {{ 73 < high <= 75 }}
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.upstairs
                        target_temp_high: "{{ state_attr('climate.upstairs', 'target_temp_high') | int - 2 }}"
                        target_temp_low: "{{ state_attr('climate.upstairs', 'target_temp_low') | int }}"

        # If no one is upstairs, raise the cooling temp gently
        - conditions:
            - condition: template
              value_template: >
                {% set sean_location = states('sensor.sean_room_location') %}
                {% set emily_location = states('sensor.emily_room_location') %}
                {{ sean_location not in ['office', 'bedroom', 'bedroom2', 'guest']
                and emily_location not in ['office', 'bedroom', 'bedroom2', 'guest'] }}
            - condition: template
              value_template: >
                {% set current = state_attr('climate.upstairs', 'temperature') | int(default=0) %}
                {% set target_high = state_attr('climate.upstairs', 'target_temp_high') | int(default=0) %}
                {{ (73 <= current < 75) or (73 <= target_high < 75) }}
          sequence:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: climate.upstairs
                      state: "cool"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.upstairs
                        temperature: "{{ state_attr('climate.upstairs', 'temperature') | int + 2 }}"
                - conditions:
                    - condition: state
                      entity_id: climate.upstairs
                      state: "heat_cool"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.upstairs
                        target_temp_high: "{{ state_attr('climate.upstairs', 'target_temp_high') | int + 2 }}"
                        target_temp_low: "{{ state_attr('climate.upstairs', 'target_temp_low') | int }}"


# Circulate air upstairs after cooling downstairs
- alias: "Post-Cooling Circulation: Move Air Upstairs After Downstairs Cooling"
  id: "postcool_upstairs_airflow"
  initial_state: off
  mode: single
  description: "Move air upstairs after cooling finishes in downstairs."
  trigger:
    - platform: state
      entity_id: climate.downstairs
      attribute: hvac_action
      from: "cooling"
      to: "idle"

  condition:
    - condition: state
      entity_id: group.family
      state: "home"

    - condition: template
      value_template: >
        {{ state_attr('climate.upstairs', 'hvac_action') == 'idle' }}

  action:
    - service: climate.set_fan_mode
      data:
        entity_id: climate.upstairs
        fan_mode: "on"
    
    - delay: "00:05:00"  # Air circulation time (5 min)

    - service: climate.set_fan_mode
      data:
        entity_id: climate.upstairs
        fan_mode: "off"

    - delay: "00:01:00"

    - service: homeassistant.reload_config_entry
      target:
        device_id: 41cf689fe0938c4721204e1c10eb5ba8

    - delay: "00:01:00"  # Air circulation time (5 min)

    - service: climate.set_fan_mode
      data:
        entity_id: climate.upstairs
        fan_mode: "off"


# Circulate air downstairs after cooling upstairs
- alias: "Post-Cooling Circulation: Move Air Downstairs After Upstairs Cooling"
  id: "postcool_downstairs_airflow"
  initial_state: on
  mode: single
  description: "Move air downstairs after cooling finishes in upstairs."
  trigger:
    - platform: state
      entity_id: climate.upstairs
      attribute: hvac_action
      from: "cooling"
      to: "idle"

  condition:
    - condition: state
      entity_id: group.family
      state: "home"

    - condition: template
      value_template: >
        {{ state_attr('climate.downstairs', 'hvac_action') == 'idle' }}

  action:
    - service: climate.set_fan_mode
      data:
        entity_id: climate.downstairs
        fan_mode: "on"
    
    - delay: "00:05:00"  # Air circulation time (5 min)

    - service: climate.set_fan_mode
      data:
        entity_id: climate.downstairs
        fan_mode: "off"


# If upstairs is within 2 degrees of cooling temp, cycle fan to potentially cool more.
- alias: "Fan Override - Passive Cooling Circulation (Upstairs)"
  initial_state: off
  trigger:
    - platform: time_pattern
      minutes: "/10"

  condition:
    - condition: or
      conditions:
        - condition: state
          entity_id: person.sean_green
          state: "home"
        - condition: state
          entity_id: person.emily_green
          state: "home"

    - condition: template
      value_template: >
        {{ state_attr('climate.downstairs', 'fan_mode') == 'off' }}

    - condition: template
      value_template: >
        {% set mode = state_attr('climate.upstairs', 'hvac_mode') %}
        {% set action = state_attr('climate.upstairs', 'hvac_action') %}
        {% set fan = state_attr('climate.upstairs', 'fan_mode') %}
        {% set current = state_attr('climate.upstairs', 'current_temperature') | int %}
        {% set target = (
            state_attr('climate.upstairs', 'target_temp_high') 
            if mode == 'heat_cool' 
            else state_attr('climate.upstairs', 'temperature')
          ) | int %}

        {{ 
          mode in ['cool', 'heat_cool'] and
          fan == 'off' and
          action not in ['cooling', 'heating'] and
          current == target - 1
        }}

  action:
    - service: climate.set_fan_mode
      data:
        entity_id: climate.upstairs
        fan_mode: "on"

    - delay: "00:10:00"

    - service: climate.set_fan_mode
      data:
        entity_id: climate.upstairs
        fan_mode: "off"

    - delay: "01:00:00"
        

- alias: "Attic Heat Circulation - Passive Cooling Trigger"
  id: "attic_heat_circulation"
  mode: single
  initial_state: off
  description: "Circulates air upstairs when attic heat hits threshold to reduce temperature imbalance."
  trigger:
    - platform: numeric_state
      entity_id: sensor.attic_temp_sensor_temperature
      above: 95

  condition:
    - condition: state
      entity_id: group.family
      state: "home"

    # Upstairs is not heating/cooling
    - condition: template
      value_template: >
        {{ state_attr('climate.upstairs', 'hvac_action') == 'idle' }}

    # Upstairs fan is not already running
    - condition: template
      value_template: >
        {{ state_attr('climate.upstairs', 'fan_mode') == 'off' }}

    # Downstairs fan isn't running (shared blower protection)
    - condition: template
      value_template: >
        {{ state_attr('climate.downstairs', 'fan_mode') == 'off' }}

  action:
    - service: climate.set_fan_mode
      data:
        entity_id: climate.upstairs
        fan_mode: "on"

    - delay: "00:15:00"

    - service: climate.set_fan_mode
      data:
        entity_id: climate.upstairs
        fan_mode: "off"

    # Cooldown delay to prevent re-triggering too frequently
    - delay: "02:00:00"



# Circulate Air for Downstairs HVAC when home
- alias: "Hourly Adaptive HVAC Fan Circulation (AQI-Based)"
  initial_state: off
  trigger:
    - platform: time_pattern
      hours: "/1"  # Runs every hour instead of reacting to every small AQI change

    # Ensure system doesn't get stuck in a state after HA restart
    - platform: homeassistant
      event: start

  condition:
    # Only run if someone is home
    - condition: or
      conditions:
        - condition: state
          entity_id: person.sean_green
          state: "home"
        - condition: state
          entity_id: person.emily_green
          state: "home"

    # Only run if HVAC is NOT actively heating or cooling
    - condition: template
      value_template: >
        {{ state_attr('climate.downstairs', 'hvac_action') not in ['heating', 'cooling']
        and state_attr('climate.upstairs', 'hvac_action') not in ['heating', 'cooling'] }}

  action:
    - choose:
        # Moderate AQI (50-100): Run fans for 15 minutes
        - conditions:
            - condition: numeric_state
              entity_id: sensor.millbrook_ncore_north_carolina_usa_air_quality_index
              above: 50
              below: 100
          sequence:
            - service: climate.set_fan_mode
              data:
                entity_id:
                  - climate.downstairs
                fan_mode: 'on'
            - delay: "00:15:00"
            - service: climate.set_fan_mode
              data:
                entity_id:
                  - climate.downstairs
                fan_mode: 'off'

        # Unhealthy AQI (100+): Run fans for 30 minutes
        - conditions:
            - condition: numeric_state
              entity_id: sensor.millbrook_ncore_north_carolina_usa_air_quality_index
              above: 100
          sequence:
            - service: climate.set_fan_mode
              data:
                entity_id:
                  - climate.downstairs
                fan_mode: 'on'
            - delay: "00:30:00"
            - service: climate.set_fan_mode
              data:
                entity_id:
                  - climate.downstairs
                fan_mode: 'off'

    # Ensure fans are OFF when AQI is good (below 40)
    - condition: numeric_state
      entity_id: sensor.millbrook_ncore_north_carolina_usa_air_quality_index
      below: 40
    - service: climate.set_fan_mode
      data:
        entity_id:
          - climate.downstairs
          - climate.upstairs
        fan_mode: "off"

# FAILSAFE - Ensure fans don't run indefinitely in case of reboot.
- alias: "Ensure HVAC Fans Turn Off After HA Restart"
  initial_state: on
  trigger:
    - platform: homeassistant
      event: start  # Runs when HA restarts
  action:
    - service: switch.turn_off
      entity_id: switch.attic_fan_plug
    - service: climate.set_fan_mode
      data:
        entity_id:
          - climate.downstairs
          - climate.upstairs
        fan_mode: "off"


# Attic fan to disperse heat pockets
- alias: "Attic Heat Fan Circulation (Smarter Triggered)"
  id: "attic_fan_temp_control"
  mode: single
  initial_state: on

  trigger:
    - platform: numeric_state
      entity_id: sensor.attic_temp_sensor_temperature
      above: 85

    - platform: time_pattern
      minutes: "/15"

    - platform: template
      value_template: >
        {% set attic = states('sensor.attic_temp_sensor_temperature') | float(0) %}
        {% set upstairs = states('sensor.upstairs_temperature') | float(0) %}
        {{ attic < 85 and (attic - upstairs > 10) }}

    - platform: template
      value_template: >
        {% set outdoor = states('sensor.openweathermap_temperature') | float(0) %}
        {% set sun = state_attr('sun.sun', 'elevation') | float(0) %}
        {{ outdoor > 75 and sun > 20 }}

  condition:
    - condition: time
      after: "09:00:00"
      before: "21:00:00"

    - condition: state
      entity_id: switch.attic_fan_plug
      state: "off"

    - condition: template
      value_template: >
        {{ state_attr('climate.upstairs', 'hvac_action') == 'idle' }}

  action:
    - choose:
        # Severe heat
        - conditions:
            - condition: numeric_state
              entity_id: sensor.attic_temp_sensor_temperature
              above: 105
          sequence:
            - service: switch.turn_on
              target:
                entity_id: switch.attic_fan_plug
            - delay: "00:30:00"

        # Moderate heat
        - conditions:
            - condition: numeric_state
              entity_id: sensor.attic_temp_sensor_temperature
              above: 95
          sequence:
            - service: switch.turn_on
              target:
                entity_id: switch.attic_fan_plug
            - delay: "00:25:00"

        # Mild heat
        - conditions:
            - condition: numeric_state
              entity_id: sensor.attic_temp_sensor_temperature
              above: 85
          sequence:
            - service: switch.turn_on
              target:
                entity_id: switch.attic_fan_plug
            - delay: "00:20:00"

        # Attic delta-only
        - conditions:
            - condition: template
              value_template: >
                {% set attic = states('sensor.attic_temp_sensor_temperature') | float(0) %}
                {% set upstairs = states('sensor.upstairs_temperature') | float(0) %}
                {{ attic < 85 and (attic - upstairs > 10) }}
          sequence:
            - service: switch.turn_on
              target:
                entity_id: switch.attic_fan_plug
            - delay: "00:15:00"

        # Sun elevation + outdoor temp fallback
        - conditions:
            - condition: template
              value_template: >
                {% set outdoor = states('sensor.openweathermap_temperature') | float(0) %}
                {% set sun = state_attr('sun.sun', 'elevation') | float(0) %}
                {{ outdoor > 75 and sun > 20 }}
            - condition: numeric_state
              entity_id: sensor.attic_temp_sensor_temperature
              below: 85
          sequence:
            - service: switch.turn_on
              target:
                entity_id: switch.attic_fan_plug
            - delay: "00:10:00"

    - service: switch.turn_off
      target:
        entity_id: switch.attic_fan_plug

    - delay: "00:30:00"  # Cooldown





# Porch Door Automation for Nest HVAC Mode
- alias: "Porch Door Control for Nest"
  initial_state: on
  trigger:
    - platform: state
      entity_id: binary_sensor.patio_door
      to: "on"
      for:
        seconds: 120
    - platform: state
      entity_id: binary_sensor.patio_door
      to: "off"
      for:
        seconds: 10
  action:
    - service: climate.set_hvac_mode
      data_template:
        entity_id: climate.downstairs
        hvac_mode: >
          {% if is_state('binary_sensor.patio_door', 'on') %}
            off
          {% else %}
            {% set outside_temp = states('sensor.openweathermap_temperature') | float(0) %}
            {% set downstairs_temp = state_attr('climate.downstairs', 'current_temperature') | float(0) %}
            
            {% if outside_temp >= 75 and downstairs_temp >= 71 %}
              cool
            {% elif outside_temp < 50 and downstairs_temp < 66 %}
              heat
            {% else %}
              heat_cool
            {% endif %}
          {% endif %}
    - service: climate.set_hvac_mode
      data_template:
        entity_id: climate.upstairs
        hvac_mode: >
          {% if is_state('binary_sensor.patio_door', 'on') %}
            off
          {% else %}
            {% set outside_temp = states('sensor.openweathermap_temperature') | float(0) %}
            {% set downstairs_temp = state_attr('climate.downstairs', 'current_temperature') | float(0) %}
            
            {% if outside_temp >= 75 and downstairs_temp >= 71 %}
              cool
            {% elif outside_temp < 50 and downstairs_temp < 66 %}
              heat
            {% else %}
              heat_cool
            {% endif %}
          {% endif %}

# Set Nest to Away Mode when Family Leaves
- alias: "Nest Away Mode"
  initial_state: on
  trigger:
    platform: state
    entity_id: group.family
    to: "not_home"
    for:
      minutes: 10
  action:
    - service: climate.set_preset_mode
      data:
        entity_id: climate.downstairs
        preset_mode: "eco"
    - service: climate.set_preset_mode
      data:
        entity_id: climate.upstairs
        preset_mode: "eco"

# Ceiling Fan Control for Living Room based on Occupancy and Temperature
- alias: Turn on Ceiling Fan (Living Room)
  initial_state: on
  trigger:
    platform: state
    entity_id: input_boolean.living_room_occupied
    to: "on"
    for:
      minutes: 4
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: group.seanemily
        state: "home"
      - condition: time
        after: "07:00:00"
        before: "23:00:00"
      - condition: numeric_state
        entity_id: sensor.downstairs_temperature
        above: 72
  action:
    - service: switch.turn_on
      entity_id: switch.living_room_fan

# Living Room Fan Turn Off based on Occupancy and Media Player States
- alias: Turn off Living Room Fan
  initial_state: on
  trigger:
    platform: state
    entity_id: input_boolean.living_room_occupied
    to: "off"
    for:
      minutes: 10
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ not is_state('media_player.plex_living_room_tv', 'playing') and not is_state('media_player.shield', 'playing') }}"
  action:
    - service: switch.turn_off
      entity_id: switch.living_room_fan

# Bedroom Fan Control based on Occupancy and Temperature
- alias: Turn on Bedroom Fan
  initial_state: on
  trigger:
    platform: state
    entity_id: input_boolean.bedroom_occupied
    to: "on"
    for:
      minutes: 5
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: group.seanemily
        state: "home"
      - condition: numeric_state
        entity_id: sensor.bedroom_temperature_f
        above: 71
  action:
    - service: switch.turn_on
      entity_id: switch.bedroom_fan

# Bedroom Fan Turn Off based on Occupancy and Media Player States
- alias: Turn off Bedroom Fan
  initial_state: on
  trigger:
    platform: state
    entity_id: input_boolean.bedroom_occupied
    to: "off"
    for:
      minutes: 10
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ not is_state('media_player.bedroom_tv', 'playing') and not is_state('media_player.bedroom_speaker', 'playing') }}"
      - condition: state
        entity_id: input_boolean.bedtime_emily
        state: 'off'
      - condition: state
        entity_id: input_boolean.bedtime_sean
        state: 'off'
  action:
    - service: switch.turn_off
      entity_id: switch.bedroom_fan



- alias: "Guest Room Window Sabotage Alert"
  id: "guest_window_sabotage_alert"
  initial_state: off
  mode: single

  trigger:
    - platform: state
      entity_id: binary_sensor.guest_window
      to: "on"
      for:
        minutes: 5

  condition:
    - condition: numeric_state
      entity_id: sensor.openweathermap_temperature
      above: 70

    - condition: numeric_state
      entity_id: sensor.openweathermap_humidity
      above: 70

  action:
    - variables:
        outside_temp: "{{ states('sensor.openweathermap_temperature') }}"
        outside_humidity: "{{ states('sensor.openweathermap_humidity') }}"
        upstairs_temp: "{{ state_attr('climate.upstairs', 'current_temperature') }}"
        upstairs_hvac: "{{ state_attr('climate.upstairs', 'hvac_action') | title }}"
        now_time: "{{ now().strftime('%I:%M %p') }}"

    - service: notify.notify
      data:
        title: "🪟 Guest Room Window Open 5+ Min"
        message: >
          Outside: {{ outside_temp }}°F / {{ outside_humidity }}% humidity
          Upstairs Temp: {{ upstairs_temp }}°F | HVAC: {{ upstairs_hvac }}
          Your system is fighting open air. Logged at {{ now_time }}.

    - service: persistent_notification.create
      data:
        title: "Guest Room Sabotage Detected"
        message: >
          The guest room window has been open for over 5 minutes during high humidity and temperature.

          • Outside Temp: {{ outside_temp }}°F
          • Humidity: {{ outside_humidity }}%
          • Upstairs Temp: {{ upstairs_temp }}°F
          • HVAC Status: {{ upstairs_hvac }}
          • Logged at: {{ now_time }}

          Consider closing the window to preserve system efficiency.
        notification_id: guest_window_sabotage


# HA Nest Schedule backup for downstairs
- alias: "Thermostat Backup Schedule - Downstairs Combined"
  id: "thermostat_backup_downstairs_combined"
  mode: single
  trigger:
    - platform: time
      at: "07:01:00"
    - platform: time
      at: "11:01:00"
    - platform: time
      at: "21:01:00"

  action:
    - choose:
        # --- 7:00 AM Logic ---
        - conditions:
            - condition: time
              after: "06:59:00"
              before: "11:00:00"
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('climate.downstairs', 'hvac_mode') == 'heat_cool' }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.downstairs
                        target_temp_low: 66
                        target_temp_high: 71
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('climate.downstairs', 'hvac_mode') == 'cool' }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.downstairs
                        temperature: 71

        # --- 11:00 AM Logic ---
        - conditions:
            - condition: time
              after: "10:59:00"
              before: "21:00:00"
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('climate.downstairs', 'hvac_mode') == 'heat_cool' }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.downstairs
                        target_temp_low: 66
                        target_temp_high: 73
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('climate.downstairs', 'hvac_mode') == 'cool' }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.downstairs
                        temperature: 73

        # --- 9:00 PM Logic ---
        - conditions:
            - condition: time
              after: "20:59:00"
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('climate.downstairs', 'hvac_mode') == 'heat_cool' }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.downstairs
                        target_temp_low: 64
                        target_temp_high: 76
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('climate.downstairs', 'hvac_mode') == 'cool' }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.downstairs
                        temperature: 76

# Ha Nest Schedule backup for Upstairs
- alias: "Thermostat Backup Schedule - Upstairs Combined"
  id: "thermostat_backup_upstairs_combined"
  mode: single
  trigger:
    - platform: time
      at: "07:01:00"
    - platform: time
      at: "11:01:00"
    - platform: time
      at: "21:01:00"

  action:
    - choose:
        # --- 7:00 AM Logic ---
        - conditions:
            - condition: time
              after: "06:59:00"
              before: "11:00:00"
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('climate.upstairs', 'hvac_mode') == 'heat_cool' }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.upstairs
                        target_temp_low: 66
                        target_temp_high: 71
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('climate.upstairs', 'hvac_mode') == 'cool' }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.upstairs
                        temperature: 71

        # --- 11:00 AM Logic ---
        - conditions:
            - condition: time
              after: "10:59:00"
              before: "21:00:00"
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('climate.upstairs', 'hvac_mode') == 'heat_cool' }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.upstairs
                        target_temp_low: 66
                        target_temp_high: 73
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('climate.upstairs', 'hvac_mode') == 'cool' }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.upstairs
                        temperature: 73

        # --- 9:00 PM Logic (Special Rule: 71°F regardless) ---
        - conditions:
            - condition: time
              after: "20:59:00"
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('climate.upstairs', 'hvac_mode') == 'heat_cool' }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.upstairs
                        target_temp_low: 64
                        target_temp_high: 71
                - conditions:
                    - condition: template
                      value_template: "{{ state_attr('climate.upstairs', 'hvac_mode') == 'cool' }}"
                  sequence:
                    - service: climate.set_temperature
                      data:
                        entity_id: climate.upstairs
                        temperature: 71
